 _      _
| \    | |  64
|  \   | |
|   \  | |    DISASSEMBLER VER 1.1 !
| |\  \| |    Copyright 03.1.97,  Jovis
| | \    |    
| |  \   |    ~~QUALITY TOOLS FOR THE DEDICATED HACKER~~
|_|   \__|


Ware: THe Newest Version of the N64 disassembler, By Jovis.
Use:  To Hack N64 ROMS

New Features in Version 1.1:
~Image Zoom
~New uncompressed n64 image format (0xa5000 waverace jap)
~New sound features (still kinda noisy but what the hell)
~Better toolbar
~Jump to offset
~Scroll windows with pageup/down, arrow up/down
~Waveform view to check out sounds


Features:
~Disassembly (MIPS 4xxx series processor)
~Ascii viewing of data
~Hex viewing of data
~Image viewing of data (6 Formats!)
~Active Code / Data Seperation
~Multiple Byte-Ordering Configurations
~Multiple windows / formats open to view data
~Multiple Roms open at once

Future Features (maybe in next version):
~Hex-Editing capability
~Built in Assembler
~Jump/Branch Tracing (will need more info on the address space of the n64)
~Fix the printing
~Image/Sound Rip
~More Image Formats (Compressed?)
~Checksum Generate/Repair
~Search/Find strings/hex bytes
~Your Idea Here

_____________________________________________________________________________
DISCLAIMER:
        The author of this program makes no warranty, express or implied
        about its usefulness for any purpose. The end user, YOU, take full 
        responsibility for any legal actions against the use of this program.
        The author does not endorse or condone the copying of any software
        titles that you do not own, except in the interest of protecting 
        your investment in titles which you have purchased. The author will
        not be responsible for the use or misuse of this program, or any 
        illegal or 'grey-area' activities which are facilitated by the use
        or misuse of this program. This program is meant to be an educational
        and experimental tool only, for personal, non-corporate uses. 
        Any other use constitutes copyright infringement.

        N64 is a reference to 'new-64' , which is not intended to bear a
        resemblance to any trademark or copyrighted material or device.
_____________________________________________________________________________
Whew! :)
_____________________________________________________________________________

New Features breakdown:

Sound
        PCM pulse code modulation playing ability. Go to a place in a rom
        where the waveform looks like something may be sound. Play it.
        The default settings are where ive found sound. Try offset 0xa63bd8
        in kart jap version with 100k samples and default on the rest.

Jump to offset
        Theres a bug that makes it go to the wrong offset when theres an even
        number of digits in the address. Zero pad to an odd # of digits to
        get around it. (im ina hurry)

Waveform View
        Yeah, like look for sounds. You know what to look for.

Image zoom
        Use this when you want a larger view of some little bitmaps. The
        flag and reverse-dudes from kart are best viewed at 4x or 8x.

Uncompressed 15 bit packed n64 format
        Still, the colors dont look right. Hmm I gonna have to work on it.
        Offset 0xa5000 in waverace jap has the big logo.

New Toolbar
        Im not an artist.

Scrolling with keys
        up/down arrows and page up/down
        

Older Features:

Disassembly:
        Obviously, you need to know MIPS 4xxx assembly language to understand
        what is going on here. I dont know the entry point into the rom,
        its for sure not 0x0000. There is a large block of valid code
        somewhere a little after the beginning of the rom, this may be the
        entry point, I dont know yet. If the disassembly window takes a while
        to update, this means that there is a large block of valid code after
        the place you are viewing. Turn off Data Extraction, and the window
        will be able to update much faster.

Ascii Format: (Even Lamers Can Get Some Use Out Of This)
        Hmm, looking for secrets in Mortal Kombat? Just open up a new window
        and hit Format-Ascii. Scroll through the ascii window until you find
        some text. The window is sizeable so you can scale the ascii into
        different size rectangles to check out those strange patterns and
        structures within the data.

Hex Format: 
        Well I admit, I dont have a good use for this one, but it dumps
        out the data as Hex Bytes.

Image Format: 
        Several different ways of displaying the data to help you find
        sprites, texture maps, and tiles. To know what to look for, try
        opening up a .bmp file, and try the different image formats,
        while changing the size of the window to make the image
        look right. Since the data is raw, the view window size must be
        changed until you see something that looks like a picture.
        (Keeping the window small helps it update faster)
        I have no idea how the sprites are encoded, This is my best guess
        at some possible formats. I havent found any sprites yet, though.
        
Active Data Extraction:
        Will attempt to seperate blocks of code and data, by assuring that
        no code directly enters invalid opcodes. This means that between a
        branch or jump instruction and an invalid opcode (data), there is 
        only data, even if the data appears to be valid opcodes. The data
        extraction routine will take a lot of time (slowing down the window
        refresh), when a large block of valid code is found. I suggest you
        disable it when this happens.

Byte - Ordering:
        This allows you to change the way the bytes in the rom are 
        intrepreted, Either big or little endian and bytes flipped within
        words. Im pretty sure the right configuration is big endian, byte 
        flipped. Other configurations seem to give no large blocks of valid
        assembly code. (also the strings look right)

Multiple Windows/Formats open:
        Ok, just hit ROM-Open, open a ROM, then hit Window-New, then Hit 
        Format (some format), and you will be able to look at any number
        of different interpretations of the ROM. I like to tile ASCII,
        Disassembly, and Image(24 bit). All windows open on the same 
        ROM will scroll together, so you can just worry about scrolling
        in one window.

Multiple ROMS open:
        Cool, two ROMs side by side, find the common blocks of code.
        Maybe all ROMs have the same bootstrap block? Just hit ROM-open
        then hit it again and open another, and another, and another....

BUG:
I havent got the coprocessor operations coded yet. (the floating point
instruction set is quite big)
These ops will appear as: 

'cop0' (tlb, memory management)
'cop1' (floating point i think)
'cop2' (the 'Reality Coprocessor'--Sound functions, Maybe 3D accelerator)
cop0 and cop1 are fully known, but cop2 is totally unknown at this time.

You can contact me on irc (efnet) usually #doctor64, #snes, #emu, etc.
Dont ask me LAMER-ASS QUESTIONS ABOUT EMULATORS.
THIS IS NOT AN EMULATOR, GET OVER IT!!!!!!!!!!!!!!!!

Please report any bugs to me.

Happy Hacking

~~~~~~~~~~~~~~~~~JOVIS (for status, not fun) :P

